%\VignetteIndexEntry{Introduction to VariantAnnotation}
%\VignetteDepends{GenomicRanges, Rsamtools, Biostrings, AnnotationDbi, BSgenome}
%\VignetteKeywords{variants, sequence, sequencing, alignments}
%\VignettePackage{VariantAnnotation}
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}

\textwidth=6.5in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Bioconductor}{\software{Bioconductor}}
\newcommand{\VariantAnnotation}{\Rpackage{VariantAnnotation}}

\title{Introduction to \VariantAnnotation}
\author{Valerie Obenchain, Michael Lawrence}
\date{\today}

\begin{document} 

\maketitle

<<options, echo=FALSE>>=
options(width=72)
@

\section{Introduction}
In this vignette we demonstrate a general workflow for annotating and
filtering genetic variants using the \VariantAnnotation  package. As sample
data we use a Variant Call Format (VCF) file which is parsed into a
\Rfunction{SummarizedExperiment} object. We determine if the variants
fall in a coding, UTR, intron or intergenic region and compute the amino
acid coding changes for the non-synonymous variants. By querying the SIFT and 
PolyPhen database packages we obtain predictions the impact the amino acid 
coding changes in these non-synonymous variants may have on protein function.
Filtering functions are available to subset variants on physical location in 
the gene or membership in dbSNP. 

\section{Variant Call Format (VCF) files}
Our sample data are a subset of 1000 variants and 50 samples from chromosome 22
downloaded from the 1000 Genomes web site,
\url{ftp://ftp-trace.ncbi.nih.gov/1000genomes/ftp/release/20110521/}.
If no \Robject{param} argument is supplied to \Rfunction{readVcf} the full 
file is read in.

<<readVcf>>=
library(VariantAnnotation)
vcffile <- system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
vcf <- readVcf(vcffile, "hg19")
@

To read in a subset of data we specify a \Rcode{GRanges} of the desired ranges 
as the \Rcode{param}. To access a subset of ranges the VCF file must have an 
accompanying Tabix index file. See ?\Rcode{indexTabix} for help with creating an 
index file.

<<readVCF_subset, eval=FALSE>>=
rngs <- GRanges(seqnames="22", ranges=IRanges(start=1000, end=10000))
subst <- readVcf(vcffile, "hg19", param=rngs)
@

The data are parsed into a \Rcode{SummarizedExperiment} using to the header 
information in the VCF file. The header is stored as a \Rcode{SimpleList} in the 
\Rcode{exptData} slot and can be viewed by querying the elements
of the list.

<<readVCF_show>>=
vcf
exptData(vcf)[["HEADER"]]
exptData(vcf)[["HEADER"]][["META"]]
@

The eight required fields of the VCF file are parsed into a \Rcode{GRanges}
object in the \Rcode{rowData} slot.

<<readVCF_rowData>>=
head(exptData(vcf)[["HEADER"]][["INFO"]], 3)
rowData(vcf)[1:3,1:7]
@

The genotype data described in the \Rcode{FORMAT} fields are parsed into 
matrices in the \Rcode{assays} slot.
<<readVCF_assays>>=
exptData(vcf)[["HEADER"]][["FORMAT"]]
assays(vcf)
assays(vcf)$GT[1:6,1:5]
@

\subsection{SNPs}

When working with snp data, a snp matrix-type of object may be useful. The
\Rfunction{MatrixToSnpMatrix} function converts the genotype calls in the
\Rcode{assays} slot to a snpMatrix.

<<snpMatrix>>=
assays(vcf)
calls <- assays(vcf)$GT
snps <- MatrixToSnpMatrix(calls)
show(snps)
@

\section{Location of variants with respect to gene function}
The \Rcode{locateVariants} function matches the ranges in a \Robject{GRanges}
with the coding, intron and UTR regions in a \Robject{TranscriptDb}. Metadata 
columns may be present in the \Robject{GRanges} but they are ignored.

As input to this function we use the \Robject{GRanges} from the \Rcode{rowData} 
slot in the \Robject{SummarizedExperiment}. \Rcode{seqlevels} in the 
\Robject{GRanges} must be adjusted if they do not match those in the 
\Robject{TranscriptDb}.

<<location>>=
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb19 <- TxDb.Hsapiens.UCSC.hg19.knownGene 

## adjust seqlevels to match the txdb19
rd <- rowData(vcf)
seqlevels(rd) <- paste("chr", seqlevels(rd), sep="")

loc <- locateVariants(rd, txdb19)
head(loc)
@

The return object is a \Robject{DataFrame} with at least one row for each 
variant. There will be multiple rows for variants that match more than one
transcript. The queryHits column maps back to the variant in the original 
query. Location categories of `coding', `5'UTR', `3'UTR', `intron' and 
`intergenic' are assigned based on the criteria in Table \ref{table:location}. 
Intergenic variants have two gene ID's, representing the genes preceding and 
following the variant. 

\begin{table}[ht]
\begin{center}
\begin{tabular}{l|l}
\hline
Region & Details \\
\hline
coding &  variant falls \emph{within} a coding region \\
5'UTR &  variant falls \emph{within} a 5' untranslated region \\
3'UTR &  variant falls \emph{within} a 3' untranslated region \\
intron &  variant falls \emph{within} a transcript but not \emph{within} a 
coding region \\
intergenic & variant does not fall \emph{within} a transcript but does have
a nearest gene match\\
transcript\_region & variant falls \emph{within} a transcript but does not 
fall \emph{within} a specified region\\
NA & variant does not fall \emph{within} a transcript and has no
nearest gene match \\
NA & variant is on a chromosome present in \Robject{query} but not in the 
\Robject{subject}\\
\hline
\end{tabular}
\end{center}
\caption{Location of variants with respect to genes}
\label{table:location}
\end{table}

Here we have a summary of Location for all variant-transcript matches.
<<explore_locateVariants>>=
table(loc$Location)
@

\section{Amino acid coding changes}

\Rfunction{predictCoding} provides amino acid coding changes for non-synonymous 
variants. This function identifies overlaps between the variants in 
\Robject{query} and the coding regions of a \Robject{TranscriptDb} object. 
Sequences for the reference codons are retrieved from either a \Robject{BSgenome} 
or fasta file. Codon sequences for the variants are constructed by substituting, 
inserting or deleting the values in the \Robject{varAllele} column into the 
reference sequence. Amino acid codes are computed for the resulting variant codon 
sequence when the length is a multiple of 3. Examples of various coding 
situations are shown in Table \ref{table:aacoding}. 

\begin{table}[ht]
\begin{center}
\begin{tabular}{l|l|l|l|l|c}
\hline
Type & refAllele & varAllele & refSeq & varSeq & translation possible \\
\hline
substitution & G & T & aag & aaT & yes\\
substitution & G & TG & tga & tTGa & no\\
substitution & G & TGCG & gtc & TGCGtc & yes\\
insertion & `' & G & cgg & Gcgg & no\\
insertion & `' & TTG & gaa & gaTTGa & yes\\
deletion & A & `' & atc & tc & no\\
deletion & GGCCTA & `' & acggcctaa & aca & yes\\
\hline
\end{tabular}
\end{center}
\caption{Amino acid coding changes}
\label{table:aacoding}
\end{table}

Either a \Robject{TranscriptDb} or a \Robject{GRangesList} can be provided as 
the \Rcode{subject}. Because this function is concerned with coding regions 
only if a \Robject{GRangesList} is supplied it is assumed the outer list 
elements define coding regions and the individual elements fall within that coding 
region. When a \Robject{TranscriptDb} is supplied the approprate 
\Robject{GRangesList} is created by calling the \Rfunction{cdsBy} function
behind the scenes.

In keeping with our VCF example we again use the \Robject{GRanges} from
the \Rcode{rowData} slot as our \Robject{query} input. The one additional
pieces of information \Rfunction{predictCoding} requires is the variant
(or alternate) allele. The ALT column in the \Rcode{GRanges} is compressed
as each variant may have >1 alternate allele. We create a flattened 
\Rcode{GRanges} such that each row represents one variant-alternate allele 
pair and the ALT values are a DNAStringSet as required by
\Rfunction{predictCoding}.

<<flatten>>=
## expand the ALT column and convert to DNAStringSet
rdflat <- rep(rd, elementLengths(values(rd)[["ALT"]]))
values(rdflat) <- DataFrame(ALT=DNAStringSet(unlist(values(rd)[["ALT"]])))
@

We use a \Robject{BSgenome} as our sequence source but could have also used
an appropriate fasta file.

<<aacoding>>=
library(BSgenome.Hsapiens.UCSC.hg19)
aacoding <- predictCoding(
              query=rdflat, 
              subject=txdb19, 
              seqSource=Hsapiens, 
              varAllele="ALT")
@

The result is a \Robject{DataFrame} with one row for each variant-transcript 
match. Unlike \Rfunction{locateVariants}, this function only returns results 
for the variants that fall in a coding region. Columns are queryHits, txID, 
refSeq, varSeq, refAA, varAA, Consequence and any metadata columns that were 
present in the \Robject{subject}. The queryHits column is the map back to the 
variants in the original \Robject{query}. If translation was possible, the 
Consequence value will be `synonymous' or `nonsynonymous'. Where translation 
was not possible, Consequence will be `frameshift' and the varAA value will be
missing. 

<<aacoding_notranslation>>= 
head(aacoding, 4)

## Consequence is 'frameshift' where translation is not possible
head(aacoding[width(aacoding$varAA) == 0,], 4)
@

\section{Filtering}

Often it is useful to identify subsets of variants that meet a specific 
criteria. There are currently two built-in filters available in
\Rpackage{VariantAnnotation}. The \Rfunction{dbSNPfilter} checks for membership 
in dbSNP and \Rfunction{regionFilter} filters variants based on the locations 
identified with\Rfunction{locateVariants}. Filters are created with the 
appropriate reference object such as a \Robject{SNPlocs} or 
\Robject{TranscriptDb} object. 

<<createFilters>>=
## create filter to identify variants present in dbSNP 
library("SNPlocs.Hsapiens.dbSNP.20110815")
snpFilt <- dbSNPFilter("SNPlocs.Hsapiens.dbSNP.20110815")

## create filter to identify variants present in introns 
regionFilt <- regionFilter(txdb19, region="intron")
regionFilt
@

When filtering data with \Rfunction{dbSNPFilter} or \Rfunction{regionsFilt} two 
options are available for the return object. If the argument \Rcode{subset=TRUE}
(default) a \Robject{GRanges} is returned that contains only the records that
passed the filter. If \Rcode{subset=FALSE}, the result is a 
\Robject{VAFilterResult} object. This object contains a logical vector 
indicating which records passed the filter and some statistics on the number of 
records removed and what filter was applied. 

First we return the subset of variants that are in dbSNP. Again, the variant 
seqlevels need to be adjusted to match the seqlevels of the annotation.
<<filtering>>=
## return the subset of records that passed the filter
rd <- rowData(vcf)
seqlevels(rd) <- paste("ch", seqlevels(rd), sep="")
dbsnp <- snpFilt(rd)
summary(dbsnp) 
metadata(dbsnp)

## return a VAFilterResult object
snpFilt(rd, subset=FALSE)
@

Next we identify the variants that fall in an intron region.
\begin{verbatim}
> rd <- rowData(vcf)
> seqlevels(rd) <- paste("chr", seqlevels(rd), sep="")
> intron <- regionFilt(rd)
> summary(intron)
 Length   Class    Mode 
    712 GRanges      S4 
\end{verbatim}

\section{SIFT and PolyPhen Databases}

From \Rfunction{predictCoding} we identified the amino acid coding changes for 
the non-synonymous variants. For this subset of variants we retrieve predictions 
of how damaging these coding changes may be. SIFT (Sorting Intolerant From 
Tolerant) and PolyPhen (Polymorphism Phenotyping) are methods that predict the 
impact of amino acid substitution on a human protein. The SIFT method uses 
sequence homology and the physical properties of amino acids to make predictions 
about protein function. PolyPhen uses sequence-based features and structural 
information characterizing the substitution to make predictions about the 
structure and function of the protein. 

Collated predictions for specific dbSNP builds are available as downloads from 
the SIFT and PolyPhen web sites. These results have been packaged into
\Rpackage{SIFT.Hsapiens.dbSNP132.db} and \Rpackage{PolyPhen.Hapiens.dbSNP131.db} 
and are designed to be searched by rsid.

We identify the non-synonymous variants and obtain the rsids.
<<nonsynonymous>>=
nonsyn <- with(aacoding, unique(queryHits[Consequence == "nonsynonymous"]))
nonsyn

nms <- names(rd[nonsyn])
rsids <- nms[grep("rs", nms, fixed=TRUE)]
rsids
@

Detailed descriptions of the database columns can be found with
\Rcode{?SIFTDbColumns} and \Rcode{?PolyPhenDbColumns}. Variants in these
databases often contain more than one row per variant. The variant may have
been reported by multiple sources and therefore the source will differ as well
as some of the other variables. 

<<sift>>=
library(SIFT.Hsapiens.dbSNP132)

## rsids in the package 
head(keys(SIFT.Hsapiens.dbSNP132))

## list available columns
cols(SIFT.Hsapiens.dbSNP132)

subst <- c("RSID", "PREDICTION", "SCORE", "AACHANGE", "PROTEINID")
sift <- select(SIFT.Hsapiens.dbSNP132, keys=rsids, cols=subst)
head(sift)
@

Next we query the PolyPhen database for information on these variants.
The PolyPhen dataset is for dbSNP build 131 and we see it does not include
all of the variants. PolyPhen provides predictions using two different
training datasets and has considerable information about 3D protein structure. 
See \Rcode{?PolyPhenDbColumns} or the PolyPhen web site listed in the
references for more details.
<<polyphen>>=
library(PolyPhen.Hsapiens.dbSNP131)
pp <- select(PolyPhen.Hsapiens.dbSNP131, keys=rsids, 
         cols=c("TRAININGSET", "PREDICTION", "PPH2PROB", "AA1", "AA2"))
head(pp)
@

\section{References}
Wang K, Li M, Hakonarson H, (2010), ANNOVAR: functional annotation of genetic 
variants from high-throughput sequencing data. Nucleic Acids Research, Vol 38,
No. 16, e164.\\

\noindent McLaren W, Pritchard B, RiosD, et. al., (2010), Deriving the consequences of
genomic variants with the Ensembl API and SNP Effect Predictor. Bioinformatics,
Vol. 26, No. 16, 2069-2070.\\

\noindent SIFT home page :
\url{http://sift.bii.a-star.edu.sg/}\\

\noindent PolyPhen home page :
\url{http://genetics.bwh.harvard.edu/pph2/}

\section{Session Information}
<<sessionInfo, echo=FALSE>>=
sessionInfo()
@

\end{document}
