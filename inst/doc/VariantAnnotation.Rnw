%\VignetteIndexEntry{Genetic Variant Annotation}
%\VignetteDepends{GenomicRanges, Rsamtools, Biostrings}
%\VignetteKeywords{variants, sequence, sequencing, alignments}
%\VignettePackage{VariantAnnotation}
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}

\textwidth=6.5in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Bioconductor}{\software{Bioconductor}}
\newcommand{\VariantAnnotation}{\Rpackage{VariantAnnotation}}

\title{Annotation of Genetic Variants with \VariantAnnotation}
\author{Valerie Obenchain and Michael Lawrence}
\date{\today}

\begin{document} 

\maketitle

<<options, echo=FALSE>>=
options(width=72)
@

\section{Introduction}
In this vignette we illustrate how to annotate genetic variants using 
the \VariantAnnotation  package. Location with respect
to gene functionality is provided as well as potential amino acid 
coding changes for variants that fall in coding regions.
Support has been developed for filtering variants based on user-specified 
criteria such as location, SIFT score, or inclusion in dbSNP or the 
1000 Genomes Project. 

%Gene-based annotations define the location of the variants, with respect to
%the gene, e.g., intronic, exonic, intergenic etc.
%In the case of an intergenic variant, the names of the flanking genes are provided. 
%The functional consequence is provided for variants that fall inside exons. These
%include synonymous or non-synonymous SNV, frameshift insertion or deletion,
%non-frameshift insertion or deletion, frameshift or non-frameshift block substitution.
%If there is a change in amino acid sequence it is provided as a 'sequence change',
%where a standard nomenclature is used to describe the sequence changes.

\section{Variant Location}
In this section we identify the location of the variant with respect to the 
functional consequence on genes. If a variant matches multiple regions 
(i.e., both coding region and intron) the highest priority position will be 
assigned. Gene regions and their priority are summarized in 
Table \ref{table:location}.

\begin{table}[ht]
\begin{center}
\begin{tabular}{c|c|l}
\hline
Region & Priority & Details \\
\hline
coding & 1 & variant falls within a coding region \\
%splicing & * & variant is within 2-bp of a splicing junction \\
%ncRNA & 2 & variant overlaps a transcript without coding annotation in the gene
%definition \\
UTR5 & 2 & variant overlaps any portion of a 5' untranslated region \\
UTR3 & 2 & variant overlaps any portion of a 3' untranslated region \\
intron & 3 & variant overlaps a transcript but does not fall within a coding
region \\
%upstream & 5 &  variant overlaps 1-kb region upstream of transcription start
%site \\
%downstream & 5 & variant overlaps 1-kb region downtream of transcription end
%site \\
intergenic & 4 & variant is in an intergenic region (i.e., not in a transcript) \\
\hline
\end{tabular}
\end{center}
\caption{Variant Location Precedence}
\label{table:location}
\end{table}

The \Rpackage{VariantAnnotation} package contains a \Robject{GRanges} object 
consisting of variants from the ANNOVAR web site and other modified
variants. We will use this as our sample data. 

<<data>>=
library(VariantAnnotation)
data(variants)
head(variants, 4)
@

The \Rfunction{locateVariants} function returns 
the Location, txID and geneID appended as metadata 
to the \Robject{query}. 
For intergenic variants, gene ID's for the flanking genes 
on either side of the variant are provided.
Required inputs for the \Robject{query} are chromosome and range. 
The range represents the position of the basepairs 
to be replaced or of an insertion or deletion. 


<<location>>=
library(TxDb.Hsapiens.UCSC.hg18.knownGene)
txdb <- Hsapiens_UCSC_hg18_knownGene_TxDb
loc <- locateVariants(variants, txdb)
head(values(loc)[c("Location", "txID", "geneID")], 7)
@

\section{Amino Acid Coding Changes}
Amino acid coding changes can be found for substitutions, insertions,
and deletions that fall within a coding regions and the basepair changes
result in a multiples of 3.

Note that range of the \Robject{query} represents the position of the basepairs 
in the refAllele column. The range of a substitution will indicate
the one or more basepairs to be substituted. Insertions and deletions are 
represented by a missing value in either the refAllele or varAllele column. 
An insertion has a missing value in the refAllele column which results in
a negative range (i.e., the start value will be one larger than the end value). 
A deletion has a missing value in the varAllele column. The range
for a deletion will not be negative as the range represents the
position of reference alleles. 

The function we use to identify coding changes is \Rfunction{predictCoding}. 
First overlaps are identified between a list of variants
and the coding regions of a \Robject{TranscriptDb} object. 
The sequences for the variants that fall in coding regions are then 
retrieved from either a \Robject{BSgenome} object or fasta file.
If the resulting codon change (i.e., total basepairs) is a  multiple of 3,
the change in amino acid coding is computed using the the alleles 
in the varAllele column of the \Robject{query}. Table \ref{table:aacoding} 
summarizes how variant alleles are classified
and for what situations the amino acid codes are computed. 

\begin{table}[ht]
\begin{center}
\begin{tabular}{l|l|l|l|l}
\hline
refAllele & varAllele & AA Coding provided & Consequence & Details \\
\hline
G & T & yes & synonymous or nonsynonymous & single basepair replacement\\
G & TG & no & frameshift & replacement result is not a multiple of 3\\
G & TGCG & yes & synonymous or nonsynonymous & replacement result is a multiple of 3\\
"" & G & no & frameshift & insertion is not a multiple of 3\\
"" & TTG & yes & synonymous or nonsynonymous & insertion is a multiple of 3\\
A & "" & no & frameshift & deletion is not multiple of 3\\
GGCCTA & "" & yes & synonymous or nonsynonymous & deletion is multiple of 3\\
\hline
\end{tabular}
\end{center}
\caption{Amino Acid Coding}
\label{table:aacoding}
\end{table}

The coding variants we are interested in fall in chromosomes 1, 2 and 16. 
In the interest of efficiency we create a subset 
\Robject{GRangesList} with the chromosomes
of interest but could also have used the \Robject{TranscriptDb} object.
<<aacoding>>=
library(BSgenome.Hsapiens.UCSC.hg18)
cdsByTx <- cdsBy(txdb)
grl <- keepSeqlevels(cdsByTx, c("chr1", "chr2", "chr16"))
@

Our result is a \Robject{DataFrame} containing only the variants that
matched a coding region. New metadata columns include queryIndex, 
tx\_id, refCodon, varCodon, refAA, varAA, ConsequenceNew and any
metadata columns that were present in the \Robject{subject}. 

Each row of the result represents a transcript
matched by a variant. When a variant matches multiple
transcripts, we see multiple rows for that variant.
For example, the variant in the sixth row of the 'variants'
object was within a coding region and matched four transcripts. 
Our result shows four rows for this variant, 
one for each transcript.
<<aacodingResult>>= 
aaCoding <- predictCoding(variants, grl, seqSource=Hsapiens,
    refAllele="refAllele", varAllele="varAllele")
head(aaCoding)
@

The variants for which no amino acid codes were
computed will have a missing in the varAA column. 
We see the codons in the varCodon column is not a 
multiple of 3 and the Consequence result is a frameshift.
<<aacodingResultOneVariant>>= 
aaCoding[width(aaCoding$varAA) == 0,] 
@

\section{Filtering}
Evaluate and filter out subsets of variants not appearing in public 
databases such as 1000 Genomes Project and dbSNP.

\subsection{Filter options}

%Region-based annotations are used to identify variants at conserved genomic regions.
%Overlaps between the variants and a user-specified conservation track are provided. 
Region Based : \\
Annotate genome elements other than genes. This is especially 
important for whole genome sequencing data as the vast majority of 
variants will be outside of protein encoding regions and their 
function effects cannot be assessed by gene-based annotations.
The following types of regions may be useful to annotate,\\
- conserved genomic\\
- predicted transcription factor binding sites\\
- predicted RNA secondary structures\\

\subsection{Filter composition} 

\subsection{Filter application}


\section{Other functionalities}
- Retrieve the nucleotide sequence in any user-specific genomic positions in
batch,\\
- identify a candidate gene list for Mendelian diseases from exome data,\\
- identify a list of SNPs from 1000 Genomes that are in strong LD with a GWAS
hit, and many other creative utilities.\\

\section{References}
Wang K, Li M, Hakonarson H, (2010), ANNOVAR: functional annotation of genetic 
variants from high-throughput sequencing data. Nucleic Acids Research, Vol 38,
No. 16, e164.\\

\noindent McLaren W, Pritchard B, RiosD, et. al., (2010), Deriving the consequences of
genomic variants with the Ensembl API and SNP Effect Predictor. Bioinformatics,
Vol. 26, No. 16, 2069-2070.

\section{Session Information}
<<sessionInfo>>=
sessionInfo()
@

\end{document}
